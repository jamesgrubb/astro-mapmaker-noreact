---
const response = await fetch('https://restcountries.com/v3.1/all')
const data = (await response.json()).sort((a:Country, b:Country) => a.name.common.localeCompare(b.name.common))
// const data = await response.json()



type Country = {
	name: {
		common: string
	};
	cca3: string	
}

---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
</head>
<body>
	<main class="h-screen grid">
		<section class="col-span-full row-span-full relative h-full bg-slate-600 grid">
			<div id="map"></div>
		</section>
		<section class="col-span-full row-span-full z-10 grid">
			<canvas id="paper" data-resize="true"></canvas>
			<form class="col-span-full row-span-full align-self-start z-10" action="">
				<select class="select select-bordered w-full max-w-xs" name="country" id="country">
					<option disabled selected>Country</option>
				{data.map((country: Country) => (
					<option value={country.cca3}>{country.name.common}</option>
				))}
				</select>
			</form>
		</section>
	</main>
</body>
</html>
<style is:global>
	:root {
		--mapWidth: 3644px;
		--mapHeight: 2540px;
		--aspectRatio: calc(var(--mapWidth) / var(--mapHeight));

	}
</style>
<script>
import 'mapbox-gl/dist/mapbox-gl.css';
import map from '../utils/map.ts';
import paper from 'paper';

map.on('load',()=>{
	
	//Add background
	paper.setup('paper')

	map.addLayer({
		id: 'background',
		source: {
			type: 'vector',
			url: 'mapbox://mapbox.country-boundaries-v1'
		},
		'source-layer': 'country_boundaries',
		type:'fill',
		paint: {
			'fill-color': '#aaa',
			
		},
			
	})
	
	

	//Add country

	map.addLayer({
		id: 'country',
		source: {
			type: 'vector',
			url: 'mapbox://mapbox.country-boundaries-v1',
		},
		'source-layer': 'country_boundaries',
		type:'fill',
		'layout':{
			'visibility':'none'
		},
		paint: {
			'fill-color': '#000',			
		}
	})

	
filterCountry()

		})
// map.on('style.load', () => {
// })
const filterCountry = () => {

	const select = document.getElementById('country') as HTMLSelectElement;
	select.addEventListener('change', () => {
		const value = select.value;
		// console.log(value)
		// const visibility = map.getLayoutProperty('country', 'visibility');
		// if (visibility === 'visible') {
		// 	map.setLayoutProperty('country', 'visibility', 'none');
		// } else {
		// 	map.setLayoutProperty('country', 'visibility', 'visible');
		// }
		map.setLayoutProperty('country', 'visibility', 'visible');
	if (value) {
		map.setFilter('country', [
			'in',
			'iso_3166_1_alpha_3',
			value
		]);
	
	}
	
	map.on('idle', () => {
		draw()	
	})
	
	
	
	})
	
	
	
}		


const draw = () => {
	console.log('draw function')
	const mapImage = map.getCanvas().toDataURL();
	console.log("ðŸš€ ~ draw ~ mapImage:", mapImage)
	const mapClone = new paper.Raster(map.getCanvas().toDataURL()); //map.getCanvas().toDataURL();
	console.log("ðŸš€ ~ draw ~ mapClone:", mapClone)
	
	mapClone.on('load', () => {		
		mapClone.size = new paper.Size(map.getCanvas().width, map.getCanvas().height);
		mapClone.bounds.topLeft = paper.view.bounds.topLeft;	
		mapClone.fitBounds(paper.view.bounds);
		console.log(mapClone)
		const spot = new paper.Path.Circle({
			position: new paper.Point(0,0),
			radius: 10,
			fillColor: new paper.Color(255, 0, 0, 1.0),
		})
		spot.bounds.center = paper.view.center
		
	})
	
	// paper.project.clear()
}

</script>